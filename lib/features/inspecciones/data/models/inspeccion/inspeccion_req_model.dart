import 'package:eos_mobile/features/inspecciones/domain/entities/inspeccion/inspeccion_req_entity.dart';

/// [InspeccionReqModel]
///
/// Representa los datos de la request para la inspección, se mandara esta informacion
/// en el body de la petición.
class InspeccionReqModel extends InspeccionReqEntity {
  const InspeccionReqModel({
    required String idInspeccionTipo,
    required String inspeccionTipoCodigo,
    required String inspeccionTipoName,
    required String idUnidad,
    required String unidadNumeroEconomico,
    required String idUnidadTipo,
    required String unidadTipoName,
    required bool isUnidadTemporal,
    required String locacion,
    DateTime? fecha,
    String? idBase,
    String? baseName,
    DateTime? fechaInspeccionFinal,
    DateTime? fechaInspeccionFinalUpdate,
    String? idRequerimiento,
    String? requerimientoFolio,
    String? idUnidadMarca,
    String? unidadMarcaName,
    String? idUnidadPlacaTipo,
    String? unidadPlacaTipoName,
    String? placa,
    String? numeroSerie,
    String? modelo,
    String? anioEquipo,
    String? tipoPlataforma,
    double? capacidad,
    int? odometro,
    int? horometro,
    String? observaciones,
    String? firmaOperador,
    String? firmaVerificador,
  }) : super(
        fecha                       : fecha,
        idBase                      : idBase,
        baseName                    : baseName,
        idInspeccionTipo            : idInspeccionTipo,
        inspeccionTipoCodigo        : inspeccionTipoCodigo,
        inspeccionTipoName          : inspeccionTipoName,
        fechaInspeccionFinal        : fechaInspeccionFinal,
        fechaInspeccionFinalUpdate  : fechaInspeccionFinalUpdate,
        idRequerimiento             : idRequerimiento,
        requerimientoFolio          : requerimientoFolio,
        idUnidad                    : idUnidad,
        unidadNumeroEconomico       : unidadNumeroEconomico,
        isUnidadTemporal            : isUnidadTemporal,
        idUnidadTipo                : idUnidadTipo,
        unidadTipoName              : unidadTipoName,
        idUnidadMarca               : idUnidadMarca,
        unidadMarcaName             : unidadMarcaName,
        idUnidadPlacaTipo           : idUnidadPlacaTipo,
        unidadPlacaTipoName         : unidadPlacaTipoName,
        placa                       : placa,
        numeroSerie                 : numeroSerie,
        modelo                      : modelo,
        locacion                    : locacion,
        anioEquipo                  : anioEquipo,
        tipoPlataforma              : tipoPlataforma,
        capacidad                   : capacidad,
        odometro                    : odometro,
        horometro                   : horometro,
        observaciones               : observaciones,
        firmaOperador               : firmaOperador,
        firmaVerificador            : firmaVerificador,
      );

  /// Constructor factory para crear la instancia de [InspeccionReqModel]
  /// durante el mapeo del JSON.
  factory InspeccionReqModel.fromJson(Map<String, dynamic> jsonMap) {
    return InspeccionReqModel(
      fecha                       : jsonMap['fecha'] != null ? DateTime.parse(jsonMap['fecha'] as String) : null,
      idBase                      : jsonMap['idBase'] as String? ?? '',
      baseName                    : jsonMap['baseName'] as String? ?? '',
      idInspeccionTipo            : jsonMap['idInspeccionTipo'] as String,
      inspeccionTipoCodigo        : jsonMap['inspeccionTipoCodigo'] as String,
      inspeccionTipoName          : jsonMap['inspeccionTipoName'] as String,
      fechaInspeccionFinal        : jsonMap['fechaInspeccionFinal'] != null ? DateTime.parse(jsonMap['fechaInspeccionFinal'] as String) : null,
      fechaInspeccionFinalUpdate  : jsonMap['fechaInspeccionFinalUpdate'] != null ? DateTime.parse(jsonMap['fechaInspeccionFinalUpdate'] as String) : null,
      idRequerimiento             : jsonMap['idRequerimiento'] as String? ?? '',
      requerimientoFolio          : jsonMap['requerimientoFolio'] as String? ?? '',
      idUnidad                    : jsonMap['idUnidad'] as String,
      unidadNumeroEconomico       : jsonMap['unidadNumeroEconomico'] as String,
      isUnidadTemporal            : jsonMap['isUnidadTemporal'] as bool,
      idUnidadTipo                : jsonMap['idUnidadTipo'] as String,
      unidadTipoName              : jsonMap['unidadTipoName'] as String,
      idUnidadMarca               : jsonMap['idUnidadMarca'] as String? ?? '',
      unidadMarcaName             : jsonMap['unidadMarcaName'] as String? ?? '',
      idUnidadPlacaTipo           : jsonMap['idUnidadPlacaTipo'] as String? ?? '',
      unidadPlacaTipoName         : jsonMap['unidadPlacaTipoName'] as String? ?? '',
      placa                       : jsonMap['placa'] as String? ?? '',
      numeroSerie                 : jsonMap['numeroSerie'] as String? ?? '',
      modelo                      : jsonMap['modelo'] as String? ?? '',
      locacion                    : jsonMap['locacion'] as String,
      anioEquipo                  : jsonMap['anioEquipo'] as String? ?? '',
      tipoPlataforma              : jsonMap['tipoPlataforma'] as String? ?? '',
      capacidad                   : jsonMap['capacidad'] as double? ?? 0,
      odometro                    : jsonMap['odometro'] as int? ?? 0,
      horometro                   : jsonMap['horometro'] as int? ?? 0,
      observaciones               : jsonMap['observaciones'] as String? ?? '',
      firmaOperador               : jsonMap['firmaOperador'] as String? ?? '',
      firmaVerificador            : jsonMap['firmaVerificador'] as String? ?? '',
    );
  }

  /// Constructor factory para crear la instancia de [InspeccionReqEntity]
  /// en una instancia de [InspeccionReqModel].
  factory InspeccionReqModel.fromEntity(InspeccionReqEntity entity) {
    return InspeccionReqModel(
      fecha                       : entity.fecha,
      idBase                      : entity.idBase,
      baseName                    : entity.baseName,
      idInspeccionTipo            : entity.idInspeccionTipo,
      inspeccionTipoCodigo        : entity.inspeccionTipoCodigo,
      inspeccionTipoName          : entity.inspeccionTipoName,
      fechaInspeccionFinal        : entity.fechaInspeccionFinal,
      fechaInspeccionFinalUpdate  : entity.fechaInspeccionFinalUpdate,
      idRequerimiento             : entity.idRequerimiento,
      requerimientoFolio          : entity.requerimientoFolio,
      idUnidad                    : entity.idUnidad,
      unidadNumeroEconomico       : entity.unidadNumeroEconomico,
      isUnidadTemporal            : entity.isUnidadTemporal,
      idUnidadTipo                : entity.idUnidadTipo,
      unidadTipoName              : entity.unidadTipoName,
      idUnidadMarca               : entity.idUnidadMarca,
      unidadMarcaName             : entity.unidadMarcaName,
      idUnidadPlacaTipo           : entity.idUnidadPlacaTipo,
      unidadPlacaTipoName         : entity.unidadPlacaTipoName,
      placa                       : entity.placa,
      numeroSerie                 : entity.numeroSerie,
      modelo                      : entity.modelo,
      locacion                    : entity.locacion,
      anioEquipo                  : entity.anioEquipo,
      tipoPlataforma              : entity.tipoPlataforma,
      capacidad                   : entity.capacidad,
      odometro                    : entity.odometro,
      horometro                   : entity.horometro,
      observaciones               : entity.observaciones,
      firmaOperador               : entity.firmaOperador,
      firmaVerificador            : entity.firmaVerificador,
    );
  }

  /// Serialización de la estructura del modelo a formato JSON.
  Map<String, dynamic> toJson() {
    return <String, dynamic>{
      'fecha'                       : fecha?.toIso8601String(),
      'idBase'                      : idBase,
      'baseName'                    : baseName,
      'idInspeccionTipo'            : idInspeccionTipo,
      'inspeccionTipoCodigo'        : inspeccionTipoCodigo,
      'inspeccionTipoName'          : inspeccionTipoName,
      'fechaInspeccionFinal'        : fechaInspeccionFinal?.toIso8601String(),
      'fechaInspeccionFinalUpdate'  : fechaInspeccionFinalUpdate?.toIso8601String(),
      'idRequerimiento'             : idRequerimiento,
      'requerimientoFolio'          : requerimientoFolio,
      'idUnidad'                    : idUnidad,
      'unidadNumeroEconomico'       : unidadNumeroEconomico,
      'isUnidadTemporal'            : isUnidadTemporal,
      'idUnidadTipo'                : idUnidadTipo,
      'unidadTipoName'              : unidadTipoName,
      'idUnidadMarca'               : idUnidadMarca,
      'unidadMarcaName'             : unidadMarcaName,
      'idUnidadPlacaTipo'           : idUnidadPlacaTipo,
      'unidadPlacaTipoName'         : unidadPlacaTipoName,
      'placa'                       : placa,
      'numeroSerie'                 : numeroSerie,
      'modelo'                      : modelo,
      'locacion'                    : locacion,
      'anioEquipo'                  : anioEquipo,
      'tipoPlataforma'              : tipoPlataforma,
      'capacidad'                   : capacidad,
      'odometro'                    : odometro,
      'horometro'                   : horometro,
      'observaciones'               : observaciones,
      'firmaOperador'               : firmaOperador,
      'firmaVerificador'            : firmaVerificador,
    };
  }
}
